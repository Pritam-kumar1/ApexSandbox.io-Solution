public List<Account> getAccounts(List<Account> accounts) {
    // code here
        return accounts.sort();
    
}
public class AccountWrapper implements Comparable {

    public Account oppy;
    
    // Constructor
    public AccountWrapper(Account op) {
    	// Guard against wrapping a null 
    	if(op == null) {
    		Exception ex = new NullPointerException();
    		ex.setMessage('Account argument cannot be null'); 
    		throw ex;
    	}
        oppy = op;
    }
    
    // Compare opportunities based on the opportunity amount.
    public Integer compareTo(Object compareTo) {
        // Cast argument to OpportunityWrapper
        AccountWrapper compareToOppy = (AccountWrapper)compareTo;
        
        // The return value of 0 indicates that both elements are equal.
        Integer returnValue = 0;
        if ((oppy.AnnualRevenue == null) && (compareToOppy.oppy.AnnualRevenue == null)) {
            // both wrappers have null Amounts
            returnValue = 0;
        } else if ((oppy.AnnualRevenue == null) && (compareToOppy.oppy.AnnualRevenue != null)){
            // nulls-first implementation
            returnValue = -1;
        } else if ((oppy.AnnualRevenue != null) && (compareToOppy.oppy.AnnualRevenue == null)){
            // nulls-first implementation
            returnValue = 1;
        } else if (oppy.AnnualRevenue > compareToOppy.oppy.AnnualRevenue) {
            // Set return value to a positive value.
            returnValue = 1;
        } else if (oppy.AnnualRevenue < compareToOppy.oppy.AnnualRevenue) {
            // Set return value to a negative value.
            returnValue = -1;
        } 
        return returnValue;
    }
}
